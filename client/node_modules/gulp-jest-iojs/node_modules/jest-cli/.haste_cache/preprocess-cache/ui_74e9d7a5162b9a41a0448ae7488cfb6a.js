/*istanbul ignore next*/'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var commands = require('./commands');
var components = require('../components/component-index');
var uuid = require('node-uuid');
var _ = require('lodash');
var q = require('q'); /*istanbul ignore next*/var _class = function () {



  function /*istanbul ignore next*/_class(settings) {/*istanbul ignore next*/_classCallCheck(this, _class);
    this.state = {};
    this.state.commands = initializeCommands(commands);
    this.state.containerComponents = [];
    this.state.components = initializeComponents(components, this.state.containerComponents);
    this.state.currentInteractiveCommand = {};}_createClass(_class, [{ key: 'getCommands', value: function getCommands() 


    {
      return this.state.commands;} }, { key: 'getContainerComponents', value: function getContainerComponents() 


    {
      return this.state.containerComponents;} }, { key: 'getComponents', value: function getComponents() 


    {
      return this.state.components;} }, { key: 'getComponentByID', value: function getComponentByID(


    id) {
      return findByID(this.state.components, id);} }, { key: 'click', value: function click(


    targetID) {
      var deferred = q.defer();
      var component = findByID(this.state.components, targetID);
      if (component && typeof component.command !== 'undefined') {

        var command = findByName(this.state.commands, component.command);

        switch (command.type) {
          case 'interactive':
            toggleActiveState(component, this.state);
            deferred.resolve({ currentInteractiveCommand: this.state.currentInteractiveCommand });
            break;

          case 'boolean':
            toggleActiveState(component, this.state);
            deferred.resolve();
            break;

          case 'instant':
            activate(component, this.state);
            deactivate(component, this.state);
            deferred.resolve();
            break;

          default:
          // no op
        }}

      return deferred.promise;} }]);return _class;}(); /*istanbul ignore next*/exports.default = _class;



function initializeCommands(commands) {

  _.forEach(commands, function (command) {
    var commandDefaults = { 
      id: uuid.v1() };

    _.defaults(command, commandDefaults);
    _.assign(command, command.command); // move the module commands one level up so you don't
    // have to keep using command.command
  });

  return commands;}


function initializeComponents(components, containerComponents) {

  var processedComponents = [];

  _.forEach(components, function (category) {

    function initialize(component) {
      var componentDefaults = { 
        id: uuid.v1(), 
        visible: true, 
        active: false };

      _.defaults(component, componentDefaults);
      processedComponents.push(component);
      initializeChildren(component);}


    function initializeChildren(parent) {
      var hasChildren = typeof parent.children !== 'undefined';
      if (!hasChildren) {
        return;} else 
      {
        _.forEach(parent.children, function (child) {
          initialize(child);});}}




    _.forEach(category, function (component) {
      initialize(component);
      containerComponents.push(component); // just top level components
    });});


  return processedComponents;}


function findByID(collection, id) {
  return _.find(collection, { id: id });}


function findByName(collection, name) {
  return _.find(collection, { name: name });}


function findDependentsByCommand(element, state) {
  if (typeof element.command === 'undefined') {
    return false;} else 
  {/*istanbul ignore next*/var _ret = function () {
      var command = findByName(state.commands, element.command);
      return (/*istanbul ignore next*/{ v: _.filter(state.components, function (component) {
            if (component.hasOwnProperty('parentCommand')) {
              return component.parentCommand === command.name;} else 
            {
              return false;}}) });}(); /*istanbul ignore next*/if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;}}





function activate(component, state) {
  var otherComponents = _.reject(state.components, { id: component.id });
  var command = findByName(state.commands, component.command);

  component.active = true;
  state.currentInteractiveCommand = command;

  _.forEach(otherComponents, function (otherComponent) {

    if (command && otherComponent.hasOwnProperty('command')) {
      var otherCommand = findByName(state.commands, otherComponent.command);

      // only one interactive command at a time
      if (command.type === 'interactive' && otherCommand.type === 'interactive' && 
      otherComponent.active) {
        deactivate(otherComponent, state);}}});




  _.forEach(findDependentsByCommand(component, state), function (dependent) {
    dependent.active = true;});


  var otherComponentsWithSameCommand = _.find(otherComponents, { command: component.command });
  if (Array.isArray(otherComponentsWithSameCommand)) {
    _.forEach(otherComponentsWithSameCommand, function (otherComponent) {
      otherComponent.active = true;});} else 

  if (typeof otherComponentsWithSameCommand !== 'undefined') {
    otherComponentsWithSameCommand.active = true;} else 
  {
    return;}


  if (typeof command.command !== 'undefined') {
    command.activate();} else 
  {
    return;}}



function deactivate(component, state) {
  var otherComponents = _.reject(state.components, { id: component.id });
  var command = findByName(state.commands, component.command);

  component.active = false;

  _.forEach(findDependentsByCommand(component, state), function (dependent) {
    deactivate(dependent, state);});


  var otherComponentsSameCommand = _.find(otherComponents, { command: component.command });
  if (command && Array.isArray(otherComponentsSameCommand)) {
    _.forEach(otherComponentsSameCommand, function (otherComponent) {
      otherComponent.active = false;});} else 

  if (otherComponentsSameCommand) {
    otherComponentsSameCommand.active = false;} else 
  {
    return;}


  if (!_.find(state.components, { 'active': true })) {// we're deactivating without toggling
    // to another command
    state.currentInteractiveCommand = 'none';}


  if (typeof command.command !== 'undefined') {
    command.deactivate();} else 
  {
    return;}}




function toggleActiveState(component, state) {

  if (!component.active) {
    activate(component, state);} else 
  {
    deactivate(component, state);}}