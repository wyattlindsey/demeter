/*istanbul ignore next*/'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();

var /*istanbul ignore next*/_baseComponent = require('./base-component.react'); /*istanbul ignore next*/var _baseComponent2 = _interopRequireDefault(_baseComponent);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var React = require('react');var Widgets = require('./widgets/widgets-index'); /*istanbul ignore next*/var 

Toolbar = function (_React$Component) {_inherits(Toolbar, _React$Component);
  function Toolbar(props) {/*istanbul ignore next*/_classCallCheck(this, Toolbar); /*istanbul ignore next*/return _possibleConstructorReturn(this, Object.getPrototypeOf(Toolbar).call(this, 
    props));}_createClass(Toolbar, [{ key: 'render', value: function render() 


    {
      var ButtonGroup = Widgets.ButtonGroup;
      return (
        /*istanbul ignore next*/React.createElement(ButtonGroup, /*istanbul ignore next*/{ vertical: /*istanbul ignore next*/true, block: /*istanbul ignore next*/true }, 
        this.props.childComponents));} }]);return Toolbar;}(React.Component); /*istanbul ignore next*/exports.default = 







/*istanbul ignore next*/(0, _baseComponent2.default)(Toolbar);