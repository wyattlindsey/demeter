'use strict';

var Moment = require('moment');
var inspector = require('schema-inspector');

var TimeServices = function () {

  var months = Moment.months();

  var now = new Moment();

  return { 
    convertFromMinutesAfterMidnight: function /*istanbul ignore next*/convertFromMinutesAfterMidnight(offsetInMinutes) {
      var hour = Math.floor(offsetInMinutes / 60);
      var minute = offsetInMinutes % 60;

      return { 
        hour: hour, 
        minute: minute };}, 



    convertFromDaysAfterNewYear: function /*istanbul ignore next*/convertFromDaysAfterNewYear(offsetInDays, year) {

      if (typeof year === 'undefined') {
        year = now.year();}

      var newYear = Moment(new Date(year, 0, 1));
      var newDate = newYear.add(offsetInDays, 'days');
      return { 
        year: newDate.year(), 
        month: newDate.month(), 
        date: newDate.date() };}, 



    getMinutesSinceMidnight: function /*istanbul ignore next*/getMinutesSinceMidnight(time) {
      validateTime(time);

      if (typeof time === 'undefined') {
        return false;}

      return time.hour * 60 + time.minute;}, 


    getDaysSinceNewYear: function /*istanbul ignore next*/getDaysSinceNewYear(date) {

      validateDate(date);

      if (typeof date === 'undefined') {
        return false;}

      var newYear = Moment(new Date(date.year, 0, 1));
      var current = Moment(new Date(date.year, date.month, date.date));
      return current.diff(newYear, 'days');}, 


    formattedTime: function /*istanbul ignore next*/formattedTime(time) {

      validateTime(time);

      var timeString = '', 
      ampm = 'am', 
      hour = time.hour, 
      minute = time.minute;

      if (hour >= 12) ampm = 'pm';
      if (hour > 12) hour = hour - 12;
      if (hour === 0) {
        hour = 12;
        ampm = 'am';}


      hour = hour.toString();
      minute = minute.toString();

      if (minute < 10) minute = '0' + minute;

      timeString += hour + ':' + minute + ' ' + ampm;

      return timeString;}, 


    formattedDate: function /*istanbul ignore next*/formattedDate(date) {

      validateDate(date);

      var dateString = '';
      dateString += months[date.month] + ' ' + date.date + ', ' + date.year;

      return dateString;} };}();







function validateTime(time) {

  var schema = { 
    type: 'object', 
    properties: { 
      hour: { type: 'number', gte: 0, lte: 23 }, 
      minute: { type: 'number', get: 0, lte: 59 } } };



  var result = inspector.validate(schema, time);


  if (!result.valid) {
    throwError(result.error);}}



function validateDate(date) {
  var schema = { 
    type: 'object', 
    properties: { 
      'year': { type: 'number', gte: 0, lte: 9999 }, 
      'month': { type: 'number', gte: 0, lte: 11 }, 
      'date': { type: 'number', gte: 1, lte: 31 } } };



  var result = inspector.validate(schema, date);

  if (!result.valid) {
    throwError(result.error);}}



function throwError(errors) {

  var message = '';

  errors.map(function (error) {
    message += error.message += '\n';});


  throw new Error(message);}


module.exports = TimeServices;