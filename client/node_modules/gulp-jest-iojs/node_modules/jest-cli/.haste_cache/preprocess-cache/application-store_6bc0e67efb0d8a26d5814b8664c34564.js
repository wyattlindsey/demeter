/*istanbul ignore next*/'use strict';





var /*istanbul ignore next*/_ui = require('./ui'); /*istanbul ignore next*/var _ui2 = _interopRequireDefault(_ui);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var AppDispatcher = require('../dispatcher/app-dispatcher');var EventEmitter = require('events').EventEmitter;var ApplicationConstants = require('../constants/application-constants');var SettingsStore = require('./settings-store');var _ = require('lodash');

var CHANGE_EVENT = 'change';

var ApplicationStore = Object.assign({}, EventEmitter.prototype, { 

  state: { 
    settings: {}, 
    loaded: false, 
    currentInteractiveCommand: false }, 


  ui: {}, 

  emitChange: function /*istanbul ignore next*/emitChange() {
    this.emit(CHANGE_EVENT);}, 


  addChangeListener: function /*istanbul ignore next*/addChangeListener(callback) {
    this.on(CHANGE_EVENT, callback);}, 


  removeChangeListener: function /*istanbul ignore next*/removeChangeListener(callback) {
    this.removeListener(CHANGE_EVENT, callback);}, 


  dispatchToken: AppDispatcher.register(function (action) {

    switch (action.actionType) {
      case ApplicationConstants.START_APP:
        ApplicationStore.state.settings = SettingsStore.getSettings();
        ApplicationStore.state.loaded = true;
        ApplicationStore.ui = new /*istanbul ignore next*/_ui2.default(ApplicationStore.state.settings);
        ApplicationStore.emitChange();
        break;
      case ApplicationConstants.CLICK:
        ApplicationStore.ui.click(action.targetID).
        then(function (newState) {
          _.assign(ApplicationStore.state, newState);
          ApplicationStore.emitChange();});

        break;
      default:
      //no op
    }

    return true;}), 


  appLoaded: function /*istanbul ignore next*/appLoaded() {
    return this.state.loaded;}, 


  getCurrentInteractiveCommand: function /*istanbul ignore next*/getCurrentInteractiveCommand() {
    if (this.state.currentInteractiveCommand.name) {
      return this.state.currentInteractiveCommand.name;} else 
    {
      return false;}} });






module.exports = ApplicationStore;