/*istanbul ignore next*/'use strict';var AppDispatcher = require('../dispatcher/app-dispatcher');
var EventEmitter = require('events').EventEmitter;
var q = require('q');

var CHANGE_EVENT = 'change';

var SettingsStore = Object.assign({}, EventEmitter.prototype, { 

  settings: {}, 

  emitChange: function /*istanbul ignore next*/emitChange() {
    this.emit(CHANGE_EVENT);}, 


  addChangeListener: function /*istanbul ignore next*/addChangeListener(callback) {
    this.on(CHANGE_EVENT, callback);}, 


  removeChangeListener: function /*istanbul ignore next*/removeChangeListener(callback) {
    this.removeListener(CHANGE_EVENT, callback);}, 


  dispatchToken: AppDispatcher.register(function (action) {
    switch (action.actionType) {
      case true:
        break;

      default:
      // no op
    }

    return true;}), 


  getSettings: function /*istanbul ignore next*/getSettings() {
    // delete with async GET later

    //var deferred = q.defer();
    //
    //
    //
    //setTimeout(function() {
    //  deferred.resolve(settings);
    //}, 100);

    //return deferred.promise;
    return this.settings;} });



AppDispatcher.register(function (action) {
  switch (action.actionType) {
    case true:
      break;

    default:
    // no op
  }});


module.exports = SettingsStore;