'use strict';

jest.dontMock('../../app/js/lib/time-services');

var TimeServices = require('../../app/js/lib/time-services');

describe('Time Services conversion functions', function () {

  it('should convert from minutes after midnight', function () {
    var noon = TimeServices.convertFromMinutesAfterMidnight(720);
    expect(noon.hour).toBe(12);
    expect(noon.minute).toBe(0);});


  it('should convert from days after New Year', function () {
    var summerSolstice = TimeServices.convertFromDaysAfterNewYear(171, 2015);
    expect(summerSolstice.month).toBe(5);
    expect(summerSolstice.date).toBe(21);

    /* check for leap year feb 29 2016 */
    var leapYearDay = TimeServices.convertFromDaysAfterNewYear(59, 2016);
    expect(leapYearDay.month).toBe(1);
    expect(leapYearDay.date).toBe(29);

    var newYearsDay = TimeServices.convertFromDaysAfterNewYear(0);
    expect(newYearsDay.month).toBe(0);
    expect(newYearsDay.date).toBe(1);});


  it('should convert from days after new year on leap year 2/29', function () {
    var leapYearDay = TimeServices.convertFromDaysAfterNewYear(59, 2016);
    expect(leapYearDay.month).toBe(1);
    expect(leapYearDay.date).toBe(29);});


  it('should convert from days after new year on New Years itself', function () {
    var newYearsDay = TimeServices.convertFromDaysAfterNewYear(0);
    expect(newYearsDay.month).toBe(0);
    expect(newYearsDay.date).toBe(1);});


  it('should return minutes since midnight when provided with a time', function () {
    var noon = { 
      hour: 12, 
      minute: 0 };


    expect(TimeServices.getMinutesSinceMidnight(noon)).toBe(720);});


  it('should give days since New Years when provided a date', function () {
    var christmas = TimeServices.getDaysSinceNewYear({ 
      year: 2015, 
      month: 11, 
      date: 25 });


    expect(christmas).toBe(358);});


  it('should return a correctly formatted string when provided a custom time object', function () {
    var formattedTimeString = TimeServices.formattedTime({ 
      hour: 22, 
      minute: 8 });


    expect(formattedTimeString).toBe('10:08 pm');});


  it('should return a correctly formatted string when provided a custom date object', function () {
    var formattedDateString = TimeServices.formattedDate({ 
      month: 5, 
      date: 21, 
      year: 2016 });


    expect(formattedDateString).toBe('June 21, 2016');});});



describe('Time Services input validation', function () {
  it('should throw an error when parameter objects are incomplete', function () {
    var getMinutesSinceMidnight = function getMinutesSinceMidnight() {
      TimeServices.getMinutesSinceMidnight({ hour: 10 });};

    var getDaysSinceNewYear = function getDaysSinceNewYear() {
      TimeServices.getDaysSinceNewYear({ year: 2016 });};

    var formattedTime = function formattedTime() {
      TimeServices.formattedTime({ hour: 11 });};

    var formattedDate = function formattedDate() {
      TimeServices.formattedDate({ year: 2016 });};

    expect(getMinutesSinceMidnight).toThrow();
    expect(getDaysSinceNewYear).toThrow();
    expect(formattedTime).toThrow();
    expect(formattedDate).toThrow();});


  it('should throw an error when parameters are absent', function () {
    var convertFromMinutesAfterMidnight = function convertFromMinutesAfterMidnight() {
      TimeServices.convertFromMinutesAfterMidnight();};

    var getMinutesSinceMidnight = function getMinutesSinceMidnight() {
      TimeServices.getMinutesSinceMidnight();};

    var getDaysSinceNewYear = function getDaysSinceNewYear() {
      TimeServices.getDaysSinceNewYear();};

    var formattedTime = function formattedTime() {
      TimeServices.formattedTime();};

    var formattedDate = function formattedDate() {
      TimeServices.formattedDate();};

    expect(convertFromMinutesAfterMidnight).toThrow();
    expect(getMinutesSinceMidnight).toThrow();
    expect(getMinutesSinceMidnight).toThrow();
    expect(getDaysSinceNewYear).toThrow();
    expect(formattedTime).toThrow();
    expect(formattedDate).toThrow();});});