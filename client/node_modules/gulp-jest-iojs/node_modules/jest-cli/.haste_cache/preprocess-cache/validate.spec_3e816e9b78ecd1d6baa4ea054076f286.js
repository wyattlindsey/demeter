'use strict';

jest.dontMock('../../app/js/lib/validate');

var Validate = require('../../app/js/lib/validate');

describe('validate rejection', function () {
  it('throws error on no arguments', function () {
    var undefinedVar;
    expect(function () {Validate.hasArguments(undefinedVar);}).toThrow('missing arguments');});


  it('throws error on invalid date', function () {
    expect(function () {Validate.date({ month: 13, date: 1, year: 2000 });}).toThrow();
    expect(function () {Validate.date({ month: 11, date: 32, year: 2000 });}).toThrow();
    expect(function () {Validate.date({ month: 11, date: 1, year: 10000 });}).toThrow();

    expect(function () {Validate.date({ month: 11, date: 1 });}).toThrow();
    expect(function () {Validate.date({ year: 1996 });}).toThrow();});


  it('throws error on invalid time', function () {
    expect(function () {Validate.time({ hour: 25, minute: 1 });}).toThrow();
    expect(function () {Validate.time({ hour: 12, minute: 62 });}).toThrow();

    expect(function () {Validate.time({ hour: 12 });}).toThrow('missing arguments');
    expect(function () {Validate.time({ minute: 1 });}).toThrow('missing arguments');});


  it('throws error on invalid latitude', function () {
    expect(function () {Validate.latitude(160);}).toThrow('argument out of range');
    expect(function () {Validate.latitude(-1000);}).toThrow('argument out of range');

    expect(function () {Validate.latitude();}).toThrow('missing arguments');});


  it('throws error on invalid longitude', function () {
    expect(function () {Validate.longitude(190);}).toThrow('argument out of range');
    expect(function () {Validate.longitude(-1000);}).toThrow('argument out of range');

    expect(function () {Validate.longitude();}).toThrow('missing arguments');});


  it('throws error when argument out of range', function () {
    expect(function () {Validate.isWithinRange(100, 0, 50);}).toThrow('argument out of range');
    expect(function () {Validate.isWithinRange(-50, 0, 50);}).toThrow('argument out of range');

    expect(function () {Validate.isWithinRange(100, 0, 100);}).not.toThrow();});});